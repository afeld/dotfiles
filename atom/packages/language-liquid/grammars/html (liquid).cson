'fileTypes': [
  'liquid'
]
'foldingStartMarker': '(?x){%\\s*(if|unless|for|paginate|capture|form|case|tablerow|raw|comment|block|paginate|collection|grouped|archive|item)[^(%})]+%}'
'foldingStopMarker': '(?x){%\\s*(endif|endunless|endfor|endpaginate|endcapture|endform|endcase|endtablerow|endraw|endcomment|endblock|endpaginate|endcollection|endgrouped|endarchive|enditem)[^(%})]+%}'
'name': 'HTML (Liquid)'
'patterns': [
  {
    'begin': '{%\\s*comment\\s*%}'
    'end': '{%\\s*endcomment\\s*%}'
    'name': 'comment.block.liquid'
  }
  {
    'begin': '{{'
    'end': '}}'
    'name': 'punctuation.output.liquid'
    'patterns': [
      {
        'include': '#template_var'
      }
    ]
  }
  {
    'begin': '{%'
    'end': '%}'
    'name': 'punctuation.tag.liquid'
    'patterns': [
      {
        'include': '#template_tag_name'
      }
      {
        'include': '#template_var'
      }
    ]
  }
  {
    'include': 'text.html.basic'
  }
]
'repository':
  'assign_op':
    'patterns': [
      {
        'match': '/='
        'name': 'keyword.operator.assignment.augmented.liquid'
      }
    ]
  'logic_expression':
    'patterns': [
      {
        'match': '/='
        'name': 'keyword.operator.assignment.augmented.liquid'
      }
    ]
  'logic_op':
    'patterns': [
      {
        'match': '\\s+(and|or|not|contains|(\\!\\=|\\=\\=|<\\=|>\\=|<|>)\\s+'
        'name': 'keyword.operator.logical.liquid'
      }
    ]
  'template_tag_name':
    'patterns': [
      {
        'match': '(?<={%)\\s*(\\w+)'
        'name': 'entity.name.tag.liquid'
      }
    ]
  'template_var':
    'patterns': [
      {
        'captures':
          '2':
            'name': 'invalid.illegal.filter.liquid'
          '3':
            'name': 'invalid.illegal.filter.liquid'
        'match': '(\\[)(\\|)(?=[^\\]]*)(?=\\])'
      }
      {
        'match': '(?<=\\s)(\\+|\\-|\\/|\\*)(?=\\s)'
        'name': 'invalid.illegal.filter.liquid'
      }
      {
        'match': '(false|true|nil)'
        'name': 'constant.language.liquid'
      }
      {
        'captures':
          '3':
            'name': 'invalid.illegal.operator.liquid'
        'match': '(?=if|unless|elsif)\\s*[^%}]+\\s(in)\\s'
      }
      {
        'match': '\\s+(and|or|not|contains|in|by|((\\!|\\=|\\<|\\>)\\=))\\s+'
        'name': 'keyword.operator.liquid'
      }
      {
        'captures':
          '2':
            'name': 'invalid.illegal.assignment.liquid'
        'match': '(?<=assign)([^\\=]+)(\\=\\=+)'
      }
      {
        'match': '\\|\\s+(?![\\.0-9])[a-zA-Z0-9_-]+\\:\\s+'
        'name': 'support.function.with-args.liquid'
      }
      {
        'match': '\\|\\s+(?![\\.0-9])[a-zA-Z0-9_-]+\\s+'
        'name': 'support.function.without-args.liquid'
      }
      {
        'match': '(?<=\\s)(with|offset\\:|limit\\:)(?=\\s)'
        'name': 'keyword.control.liquid'
      }
      {
        'captures':
          '2':
            'name': 'invalid.illegal.argument.liquid'
        'match': '(?<=include)(.*)(with\\:|offset|limit)(?=\\s)'
      }
      {
        'match': '(?<=\\s)(\\w+\\:)(?=\\:\\s)'
        'name': 'invalid.illegal.liquid'
      }
      {
        'begin': '"'
        'end': '"'
        'name': 'string.quoted.double.liquid'
      }
      {
        'begin': '\''
        'end': '\''
        'name': 'string.quoted.single.liquid'
      }
      {
        'match': '(-|\\+)?\\s*[0-9]+(\\.[0-9]+)?'
        'name': 'constant.numeric.liquid'
      }
      {
        'match': '\\b(collection|product|linklist|linklists|order|link|customer|customer_address|line_item|shop|collections|page_title|template|image|blog|blogs|cart|pages|theme|themes|variant|items|comment|forloop|settings)\\b'
        'name': 'support.class.liquid'
      }
      {
        'match': '\\b(assets|author|body|body_raw|current|date|excerpt_raw|meta|next|pages|parent|posts|previous|site|tags|taxonomy|title|url)\\b'
        'name': 'support.class.liquid'
      }
      {
        'match': '((?<=\\w\\:\\s)\\w+)'
        'name': 'variable.parameter.liquid'
      }
      {
        'match': '(?<=\\.)\\w+\\b'
        'name': 'support.variable.liquid'
      }
      {
        'match': '\\w+'
        'name': 'variable.other.liquid'
      }
    ]
'scopeName': 'text.html.liquid'
