{
  "fileTypes": [ "jade" ],
  "name": "Jade",
  "patterns": [
    {
      "match": "^(!!!|doctype)(\\s*[a-zA-Z0-9-_]+)?",
      "name": "comment.other.doctype.jade",
      "comment": "Doctype declaration."
    },
    {
      "begin": "^(\\s*)//-",
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "comment.unbuffered.block.jade",
      "comment": "Unbuffered (jade-only) comments."
    },
    {
      "begin": "^(\\s*)//",
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "string.comment.buffered.block.jade",
      "comment": "Buffered (html) comments.",
      "patterns": [
        {
          "captures": { "1": { "name": "invalid.illegal.comment.comment.block.jade" } },
          "match": "^\\s*(//)(?!-)",
          "name": "string.comment.buffered.block.jade",
          "comment": "Buffered comments inside buffered comments will generate invalid html."
        }
      ]
    },
    {
      "begin": "^(\\s*)(script)(?=[.#(\\s])",
      "beginCaptures": { "2": { "name": "entity.name.tag.script.jade" } },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "source.script.jade",
      "comment": "Script tag with JavaScript code.",
      "patterns": [
        {
          "begin": "\\G(?=\\()",
          "end": "$",
          "name": "stuff.tag.script.jade",
          "patterns": [{ "include": "#tag_attributes" }]
        },
        {
          "begin": "\\G(?=[.#])",
          "end": "$",
          "name": "stuff.tag.script.jade",
          "patterns": [{ "include": "#complete_tag" }]
        },
        { "include": "source.js" }
      ]
    },
    {
      "begin": "^(\\s*)(style)(?=[.#(\\s])",
      "beginCaptures": { "2": { "name": "entity.name.tag.script.jade" } },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "source.style.jade",
      "comment": "Style tag with CSS code.",
      "patterns": [
        {
          "begin": "\\G(?=\\()",
          "end": "$",
          "name": "stuff.tag.style.jade",
          "patterns": [{ "include": "#tag_attributes" }]
        },
        {
          "begin": "\\G(?=[.#])",
          "end": "$",
          "name": "stuff.tag.style.jade",
          "patterns": [{ "include": "#complete_tag" }]
        },
        { "include": "source.css" }
      ]
    },
    {
      "begin": "^(\\s*):(markdown)(?=\\(|$)$",
      "beginCaptures": {
        "2": { "name": "constant.language.name.markdown.filter.jade" }
      },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "text.markdown.filter.jade",
      "patterns": [
        { "include": "#filter_args" },
        { "include": "text.html.markdown" }
      ]
    },
    {
      "begin": "^(\\s*):(sass)(?=\\(|$)$",
      "beginCaptures": { "2": { "name": "constant.language.name.sass.filter.jade" } },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "source.sass.filter.jade",
      "patterns": [
        { "include": "#filter_args" },
        { "include": "source.sass" }
      ]
    },
    {
      "begin": "^(\\s*):(less)(?=\\(|$)$",
      "beginCaptures": { "2": { "name": "constant.language.name.less.filter.jade" } },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "source.less.filter.jade",
      "patterns": [
        { "include": "#filter_args" },
        { "include": "source.less" }
      ]
    },
    {
      "begin": "^(\\s*):(stylus)(?=\\(|$)$",
      "beginCaptures": { "2": { "name": "constant.language.name.stylus.filter.jade" } },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "source.stylus.filter.jade",
      "patterns": [
        { "include": "#filter_args" },
        { "include": "source.stylus" }
      ]
    },
    {
      "begin": "^(\\s*):(coffeescript)(?=\\(|$)",
      "beginCaptures": { "2": { "name": "constant.language.name.coffeescript.filter.jade" } },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "source.coffeescript.filter.jade",
      "patterns": [
        { "include": "#filter_args" },
        { "include": "source.coffee" }
      ]
    },
    {
      "begin": "^(\\s*)((:(?=.))|(:$))",
      "beginCaptures": { "4": { "name": "invalid.illegal.empty.generic.filter.jade" } },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "text.generic.filter.jade",
      "comment": "Generic Jade filter.",
      "patterns": [
        {
          "begin": "\\G(?<=:)(?=.)",
          "end": "$",
          "name": "name.generic.filter.jade",
          "patterns": [
            {
              "match": "\\G\\(",
              "name": "invalid.illegal.name.generic.filter.jade"
            },
            {
              "match": "\\w",
              "name": "constant.language.name.generic.filter.jade"
            },
            { "include": "#filter_args" },
            {
              "match": "\\W",
              "name": "invalid.illegal.name.generic.filter.jade"
            }
          ]
        }
      ]
    },
    {
      "begin": "^(\\s*)(?=[\\w.#].*?\\.$)(?=(?:(?:(?:(?:(?:#[\\w-]+)|(?:\\.[\\w-]+))|(?:(?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))(?:(?:#[\\w-]+)|(?:\\.[\\w-]+)|(?:\\((?:[^()\\'\\\"]*(?:(?:\\'(?:[^\\']|(?:(?<!\\\\)\\\\\\'))*\\')|(?:\\\"(?:[^\\\"]|(?:(?<!\\\\)\\\\\\\"))*\\\")))*[^()]*\\))*)*)(?:(?:(?::\\s+)|(?<=\\)))(?:(?:(?:(?:#[\\w-]+)|(?:\\.[\\w-]+))|(?:(?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))(?:(?:#[\\w-]+)|(?:\\.[\\w-]+)|(?:\\((?:[^()\\'\\\"]*(?:(?:\\'(?:[^\\']|(?:(?<!\\\\)\\\\\\'))*\\')|(?:\\\"(?:[^\\\"]|(?:(?<!\\\\)\\\\\\\"))*\\\")))*[^()]*\\))*)*))*)\\.$)(?:(?:(#[\\w-]+)|(\\.[\\w-]+))|((?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))",
      "beginCaptures": {
        "2": { "name": "constant.id.tag.jade" },
        "3": { "name": "string.name.classes.tag.jade" },
        "4": { "name": "entity.name.tag.jade" }
      },
      "end": "^(?!(\\1\\s)|\\s*$)",
      "name": "text.block.dot.tag.jade",
      "comment": "Dot text block.",
      "comment": "Generated from dot_block_tag.py",
      "patterns": [
        { "include": "#tag_attributes" },
        { "include": "#complete_tag" },
        {
          "begin": "^(?=.)",
          "end": "$",
          "name": "text.block.jade",
          "patterns": [
            { "include": "#embedded_html" },
            { "include": "#html_entity" },
            { "include": "#interpolated_value" }
          ]
        }
      ]
    },
    {
      "begin": "^\\s*",
      "end": "$",
      "name": "tag.jade",
      "comment": "All constructs that generally span a single line starting with any number of white-spaces.",
      "patterns": [
        { "include": "#blocks_and_includes" },
        { "include": "#unbuffered_code" },
        { "include": "#mixins" },
        { "include": "#flow_control" },
        { "include": "#case_conds" },
        {
          "begin": "\\|",
          "end": "$",
          "name": "text.block.pipe.jade",
          "comment": "Tag pipe text line.",
          "patterns": [
            { "include": "#embedded_html" },
            { "include": "#html_entity" },
            { "include": "#interpolated_value" }
          ]
        },
        { "include": "#printed_expression" },
        {
          "begin": "\\G((?=<)|[^\\w.#]|(\\.[^\\w-]))|(#[^\\{\\w-])",
          "end": "$",
          "name": "text.jade",
          "comment": "Line starting with characters incompatible with tag name/id/class is standalone text.",
          "patterns": [
            { "include": "#embedded_html" },
            { "include": "#html_entity" },
            { "include": "#interpolated_value" }
          ]
        },
        { "include": "#complete_tag" }
      ]
    }
  ],
  "repository": {
    "filter_args": {
      "begin": "\\G(\\()",
      "captures": {
        "1": { "name": "meta.args.filter.jade" },
        "2": { "name": "invalid.illegal.extra.args.filter.jade" }
      },
      "end": "(\\))(.*?$)",
      "name": "args.filter.jade",
      "patterns": [
        {
          "begin": "([^\\s(),=]+)(=?)",
          "beginCaptures": {
            "1": { "name": "entity.other.attribute-name.tag.jade" },
            "2": { "name": "punctuation.separator.key-value.jade" }
          },
          "end": "((?=\\))|,|$)",
          "name": "attributes.tag.jade",
          "contentName": "string.value.args.filter.jade",
          "patterns": [{ "include": "#filter_args_paren" }]
        }
      ]
    },
    "filter_args_paren": {
      "begin": "\\(",
      "end": "\\)|$",
      "patterns": [
        { "include": "#filter_args_paren" }
      ]
    },
    "blocks_and_includes": {
      "captures": {
        "1": { "name": "storage.type.import.include.jade" },
        "4": { "name": "variable.control.import.include.jade" }
      },
      "match": "(extends|include|yield|append|prepend|block( (append|prepend))?)\\s+(.*)$",
      "name": "meta.first-class.jade",
      "comment": "Template blocks and includes."
    },
    "unbuffered_code": {
      "begin": "(-|(([a-zA-Z0-9_]+)\\s+=))",
      "beginCaptures": { "3": { "name": "variable.parameter.javascript.embedded.jade" } },
      "end": "$",
      "name": "javascript.embedded.jade",
      "comment": "Non-buffered executable code. Ex.:",
      "comment": "- var name = 'value';",
      "comment": "name = function() {}",
      "patterns": [{ "include": "source.js" }]
    },
    "mixins": {
      "begin": "(((mixin\\s+)|\\+)([\\w-]+))\\s*",
      "beginCaptures": {
        "2": { "name": "storage.type.function.jade" },
        "4": { "name": "entity.name.function.jade" }
      },
      "end": "$",
      "name": "meta.mixin.jade",
      "comment": "Mixin declaration and use, including the new '+' syntax.",
      "patterns": [
        {
          "begin": "",
          "end": "$",
          "name": "args.mixin.jade",
          "patterns": [{ "include": "source.js" }]
        }
      ]
    },
    "flow_control": {
      "begin": "(for|if|else if|else|each|until|while|unless|case)(\\s+|$)",
      "captures": { "1": { "name": "storage.type.function.jade" } },
      "end": "$",
      "name": "meta.control.flow.jade",
      "comment": "Jade control flow.",
      "patterns": [
        {
          "begin": "",
          "end": "$",
          "name": "js.embedded.control.flow.jade",
          "patterns": [{ "include": "source.js" }]
        }
      ]
    },
    "case_when_paren": {
      "begin": "\\(",
      "end": "\\)",
      "name": "js.when.control.flow.jade",
      "patterns": [
        { "include": "#case_when_paren" },
        {
          "match": ":",
          "name": "invalid.illegal.name.tag.jade"
        },
        { "include": "source.js" }
      ]
    },
    "case_conds": {
      "begin": "(default|when)((\\s+|(?=:))|$)",
      "captures": { "1": { "name": "storage.type.function.jade" } },
      "end": "$",
      "name": "meta.control.flow.jade",
      "comment": "Jade case conditionals.",
      "patterns": [
        {
          "begin": "\\G(?!:)",
          "end": "(?=:\\s+)|$",
          "name": "js.embedded.control.flow.jade",
          "patterns": [
            { "include": "#case_when_paren" },
            { "include": "source.js" }
          ]
        },
        {
          "begin": ":\\s+",
          "end": "$",
          "name": "tag.case.control.flow.jade",
          "patterns": [
            { "include": "#complete_tag" }
          ]
        }
      ]
    },
    "complete_tag": {
      "begin": "(?=[\\w.#])|(:\\s*)",
      "end": "(\\.?$)|(?=:.)",
      "name": "complete_tag.jade",
      "patterns": [
        { "include": "#blocks_and_includes" },
        { "include": "#unbuffered_code" },
        { "include": "#mixins" },
        { "include": "#flow_control" },
        {
          "match": "(?<=:)\\w.*$",
          "name": "invalid.illegal.name.tag.jade"
        },
        { "include": "#tag_name" },
        { "include": "#tag_id" },
        { "include": "#tag_classes" },
        { "include": "#tag_attributes" },
        {
          "match": "((\\.)\\s+$)|((:)\\s*$)",
          "captures": {
            "2": { "name": "invalid.illegal.end.tag.jade" },
            "4": { "name": "invalid.illegal.end.tag.jade" }
          }
        },
        { "include": "#printed_expression" },
        { "include": "#tag_text" }
      ]
    },
    "tag_name": {
      "begin": "([#!]\\{(?=.*?\\}))|(\\w(([\\w:-]+[\\w-])|([\\w-]*)))",
      "end": "(\\G(?<!\\5[^\\w-]))|\\}|$",
      "name": "entity.name.tag.jade",
      "patterns": [
        {
          "begin": "\\G(?<=\\{)",
          "end": "(?=\\})",
          "name": "entity.name.tag.jade",
          "patterns": [
            {
              "match": "{",
              "name": "invalid.illegal.tag.jade"
            },
            { "include": "source.js" }
          ]
        }
      ]
    },
    "tag_id": {
      "match": "#[\\w-]+",
      "name": "constant.id.tag.jade"
    },
    "tag_classes": {
      "match": "\\.[\\w-]+",
      "name": "string.name.classes.tag.jade"
    },
    "tag_attributes": {
      "begin": "(\\()",
      "captures": { "1": { "name": "constant.name.attribute.tag.jade" } },
      "end": "(\\))",
      "name": "attibutes.tag.jade",
      "patterns": [
        {
          "match": "([^\\s(),=]+)\\s*((?=\\))|,|$)",
          "captures": { "1": { "name": "entity.other.attribute-name.tag.jade" } },
          "name": "attribues.tag.jade"
        },
        {
          "begin": "([^\\s(),=]*[^\\s(),=!])\\s*(!?\\=)",
          "beginCaptures": {
            "1": { "name": "entity.other.attribute-name.tag.jade" },
            "2": { "name": "punctuation.separator.key-value.jade" }
          },
          "end": "((?=\\))|,|$)",
          "name": "attributes.tag.jade",
          "patterns": [
            { "include": "#tag_attribute_value_paren" },
            { "include": "#tag_attribute_value_brackets" },
            { "include": "#tag_attribute_value_braces" },
            { "include": "#string" },
            { "include": "source.js" }
          ]
        }
      ]
    },
    "tag_attribute_value_paren": {
      "begin": "\\(",
      "end": "\\)",
      "name": "js.value.attribute.tag.jade",
      "patterns": [
        { "include": "#tag_attribute_value_paren" },
        { "include": "#tag_attribute_value_brackets" },
        { "include": "#tag_attribute_value_braces" },
        { "include": "#string" },
        { "include": "source.js" }
      ]
    },
    "tag_attribute_value_brackets": {
      "begin": "\\[",
      "end": "\\]",
      "name": "js.value.attribute.tag.jade",
      "patterns": [
        { "include": "#tag_attribute_value_paren" },
        { "include": "#tag_attribute_value_brackets" },
        { "include": "#tag_attribute_value_braces" },
        { "include": "#string" },
        { "include": "source.js" }
      ]
    },
    "tag_attribute_value_braces": {
      "begin": "\\{",
      "end": "\\}",
      "name": "js.value.attribute.tag.jade",
      "patterns": [
        { "include": "#tag_attribute_value_paren" },
        { "include": "#tag_attribute_value_brackets" },
        { "include": "#tag_attribute_value_braces" },
        { "include": "#string" },
        { "include": "source.js" }
      ]
    },
    "tag_text": {
      "begin": "(?=.)",
      "end": "$",
      "name": "text.jade",
      "patterns": [
        { "include": "#embedded_html" },
        { "include": "#html_entity" },
        { "include": "#interpolated_value" }
      ]
    },
    "html_entity": {
      "patterns": [
        {
          "match": "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)",
          "name": "constant.character.entity.html.text.jade"
        },
        {
          "match": "[<>&]",
          "name": "invalid.illegal.html_entity.text.jade"
        }
      ]
    },
    "interpolated_value": {
      "begin": "(?<!\\\\)[#!]\\{(?=.*?\\})",
      "end": "\\}",
      "name": "string.interpolated.jade",
      "patterns": [
        {
          "match": "{",
          "name": "invalid.illegal.tag.jade"
        },
        { "include": "source.js" }
      ]
    },
    "printed_expression": {
      "begin": "(!?\\=)\\s*",
      "captures": { "1": { "name": "constant" } },
      "end": "$",
      "patterns": [{ "include": "source.js" }]
    },
    "string": {
      "begin": "(['\"])",
      "end": "(?<!\\\\)\\1",
      "name": "string.quoted.jade",
      "patterns": [
        {
          "match": "\\\\((x[0-9a-fA-F]{2})|(u[0-9]{4})|.)",
          "name": "constant.character.quoted.jade"
        },
        { "include": "#interpolated_value" }
      ]
    },
    "embedded_html": {
      "begin": "(?=<[^>]*>)",
      "end": "$|(?=>)",
      "name": "html",
      "patterns": [
        { "include": "text.html.basic" },
        { "include": "#interpolated_value" }
      ]
    }
  },
  "scopeName": "source.jade",
  "uuid": "eee6ba25-6ac2-4f7e-9c70-cddf2bd3448b"
}